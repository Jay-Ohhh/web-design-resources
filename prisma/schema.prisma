// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // https://www.prisma.io/docs/concepts/components/prisma-client/full-text-search
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  NextResource  NextResource[]
  Like          Like[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model NextResource {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  title        String    @unique
  description  String    @db.Text
  category     Category
  categorySlug String
  tags         Tag[]
  comments     Comment[]
  link         String    @unique
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String
  authType     String
  likes        Like[]
  likesCount   Int       @default(0)
  githubLink   String?
  githubAvatar String?

  @@fulltext([title, description])
}

model Like {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  user       User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  resource   NextResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@index([resourceId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   @db.Text
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  resource   NextResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
}

model Tag {
  id        String         @id @default(cuid())
  name      String         @unique
  resources NextResource[]
}

enum Category {
  Tutorials
  UI_Libraries
  Packages
  Tools
  Starters
  Other
}
